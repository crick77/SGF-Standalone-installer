; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "SGF Standalone"
#define MyAppVersion "1.2"
#define MyAppPublisher "Direzione VVF Abruzzo"
#define FilesPath "D:\MAC-OS"
; #define JavaRequired "Richiesta una Java JRE/JDK in versione 1.6.25 o superiore. Consigliata: 1.8.x (32 o 64-bit). Proseguire comunque?"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{E41FDDFA-6C15-4D9F-B538-0F8D23E79307}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=SGF_Standalone
SetupIconFile={#FilesPath}\Money.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
InfoBeforeFile={#FilesPath}\message.txt
UninstallDisplayIcon={#FilesPath}\Money.ico

[Languages]
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"

[Files]
Source: "{#FilesPath}\Money.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#FilesPath}\SGF.jnlp"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#FilesPath}\deployment.config"; DestDir: "{win}\Sun\Java\Deployment"; Flags: ignoreversion
Source: "{#FilesPath}\deployment.properties"; DestDir: "{win}\Sun\Java\Deployment"; Flags: ignoreversion 
Source: "{#FilesPath}\exception.sites"; DestDir: "{win}\Sun\Java\Deployment"; Flags: ignoreversion  
Source: "{#FilesPath}\SGF WinSize.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\SGF.jnlp"; IconFilename: "{app}\Money.ico"
Name: "{group}\Dimensione Finestra"; Filename: "{app}\SGF WinSize.exe"; IconFilename: "{app}\SGF WinSize.exe"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\SGF.jnlp"; IconFilename: "{app}\Money.ico"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Run]
Filename: "{app}\SGF WinSize.exe"; Parameters: "/firstrun"; StatusMsg: "Configurazione automatica finestra..."

[Code]
procedure Explode(var Dest: TArrayOfString; Text: String; Separator: String);
var
  i, p: Integer;
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
end;

function CutJavaVersionPart(var V: string): Integer;
var
  S: string;
  P: Integer;
begin
  if Length(V) = 0 then
  begin
    Result := 0;
  end
    else
  begin
    P := Pos('.', V);
    if P = 0 then P := Pos('_', V);

    if P > 0 then
    begin
      S := Copy(V, 1, P - 1);
      Delete(V, 1, P);
    end
      else
    begin
      S := V;
      V := '';
    end;
    Result := StrToIntDef(S, 0);
  end;
end;

function MaxJavaVersion(V1, V2: string): string;
var
  Part1, Part2: Integer;
  Buf1, Buf2: string;
begin
  Buf1 := V1;
  Buf2 := V2;
  Result := '';
  while (Result = '') and
        ((Buf1 <> '') or (Buf2 <> '')) do
  begin
    Part1 := CutJavaVersionPart(Buf1);
    Part2 := CutJavaVersionPart(Buf2);
    if Part1 > Part2 then Result := V1
      else
    if Part2 >= Part1 then Result := V2;
  end;
end;

function GetJavaVersionFromSubKey(RootKey: Integer; SubKeyName: string): string;
var
  Versions: TArrayOfString;
  I: Integer;
begin
  if RegGetSubkeyNames(RootKey, SubKeyName, Versions) then
  begin
    for I := 0 to GetArrayLength(Versions) - 1 do
    begin
      Result := MaxJavaVersion(Result, Versions[I]);
    end;
  end;
end;

function GetJavaVersionFromRootKey(RootKey: Integer): string;
begin
  Result := 
    MaxJavaVersion(
      GetJavaVersionFromSubKey(RootKey, 'SOFTWARE\JavaSoft\Java Runtime Environment'),
      GetJavaVersionFromSubKey(RootKey, 'SOFTWARE\JavaSoft\Java Development Kit'));
end;

function GetJavaVersion: string;
var
  temp: string;
begin
  temp := GetJavaVersionFromRootKey(HKLM);
  if (IsWin64) And (Length(temp)=0) then
  begin
    Result := MaxJavaVersion(Result, GetJavaVersionFromRootKey(HKLM64));
  end
  else
  begin
    Result:=temp;
  end;
end;

function HasJava1Dot625OrNewer: Boolean;
var
  jver : string;
  jverpart: TArrayOfString;
  temp : integer;
begin
  jver := GetJavaVersion;
  explode(jverpart, jver, '_');
  explode(jverpart, jverpart[0], '.');
  temp:=(StrToInt(jverpart[0])*100000)+(StrToInt(jverpart[1])*1000)
  if(GetArrayLength(jverpart)>2) Then    
    temp:=temp+StrToInt(jverpart[2]);    
  Result:=(temp>=106025);  
end;

function GetJavaVersion2: string;
var
  TempFile: string;
  ResultCode: Integer;
  S: AnsiString;
  P: Integer;
begin
  TempFile := ExpandConstant('{tmp}\javaversion.txt');
  if (not ExecAsOriginalUser(
            ExpandConstant('{cmd}'), '/c java -version 2> "' + TempFile + '"', '',
            SW_HIDE, ewWaitUntilTerminated, ResultCode)) or
     (ResultCode <> 0) then
  begin
    Log('Failed to execute java -version');
  end
    else
  if not LoadStringFromFile(TempFile, S) then
  begin
    Log(Format('Error reading file %s', [TempFile]));
  end
    else
  if Copy(S, 1, 14) <> 'java version "' then
  begin
    Log('Output of the java -version not as expected');
  end
    else
  begin
    Delete(S, 1, 14);
    P := Pos('"', S);
    if P = 0 then
    begin
      Log('Output of the java -version not as expected');
    end
      else
    begin
      SetLength(S, P - 1);
      Result := S;
    end;
  end;

  DeleteFile(TempFile);
end;

function InitializeSetup(): Boolean;
var
  ErrorCode: Integer;
begin
  Result := HasJava1Dot625OrNewer;
  if not Result then
  begin
    Result := MsgBox('Richiesta una Java JRE/JDK in versione 1.6.25 o superiore. Consigliata: 1.8.x (32 o 64-bit)', mbConfirmation, MB_YESNO) = idYes;
    if Result then
    begin
      ShellExec(
        'open', 'https://www.java.com/getjava/', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
    end;
  end;
end;